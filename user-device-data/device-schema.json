var deviceSchema = new mongoose.Schema({
    devID: String,
    devTypeID: String,
    devTypeName: String,

    dataSource: {type: String
    },
    canUserEdit: { type: Boolean
    },
    topic: {type: String
    },
    
    sensors : {type:Object
    },
    unit: {type:Object
    },
    params: {type:Object
    },
    properties : {type:Object
    },
    notes : String,
    isWeeklyOverlapCrossed: { type: Object
    },
    automationRules: [
        { type: Object
        }
    ],

    added_by : {type: mongoose.Schema.Types.ObjectId, ref: 'Admin'
    },
    organisations: [
        {type: mongoose.Schema.Types.ObjectId, ref: 'Organisation'
        }
    ],
    notifexps : [
        {type: mongoose.Schema.Types.ObjectId, ref: 'NotifExp'
        }
    ],
    users : [
        {type: mongoose.Schema.Types.ObjectId, ref: 'User'
        }
    ],
    schedules : [
        {type: mongoose.Schema.Types.ObjectId, ref: 'Schedule'
        }
    ],
    actionTriggers: [
        {type: mongoose.Schema.Types.ObjectId, ref: 'ActionTrigger'
        }
    ],

        tripLogicVersion: { type: Number
    }, // Version 1 = old trip logic, Version 2 = new trip logic
    multiFactorAuth : Boolean,
    restrictedAccess: { type: Boolean, default: false
    },
    whiteListedUsers : [
        {type: mongoose.Schema.Types.ObjectId, ref: 'User'
        }
    ],

    location: {
      latitude: {type:Number
        },
      longitude: {type:Number
        }
    },
    mobileno : Number,

    clientCompany: [
        {type: mongoose.Schema.Types.ObjectId, ref: 'ClientCompany'
        }
    ],
    vehicle: {type: mongoose.Schema.Types.ObjectId, ref: 'Vehicle'
    },

    isActive: Boolean,
    isDemoDevice: { type: Boolean, default: false
    },
    timeCreated: { type: Date, default: Date.now
    },
    tags : [String
    ],
    search: [String
    ]
}